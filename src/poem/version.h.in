#ifndef POEM_VERSION_H
#define POEM_VERSION_H

#include <string>

namespace poem {
  namespace git {

    // Is the metadata populated? We may not have metadata if
    // there wasn't a .git directory (e.g. downloaded source
    // code without revision history).
    bool IsPopulated() {
      return @GIT_RETRIEVED_STATE@;
    }

    // Were there any uncommitted changes that won't be reflected
    // in the CommitID?
    bool AnyUncommittedChanges() {
      return @GIT_IS_DIRTY@;
    }

    // The commit author's name.
    std::string AuthorName() {
      return "@GIT_AUTHOR_NAME@";
    }

    // The commit author's email.
    std::string AuthorEmail() {
      return "@GIT_AUTHOR_EMAIL@";
    }

    // The commit SHA1.
    std::string CommitSHA1() {
      return "@GIT_HEAD_SHA1@";
    }

    // The ISO8601 commit date.
    std::string CommitDate() {
      return "@GIT_COMMIT_DATE_ISO8601@";
    }

    // The last tag past this commit
    std::string LastTag() {
      return "@GIT_LAST_TAG@";
    }

    // The current branch where the current commit lies
    std::string CurrentBranch() {
      return "@GIT_CURRENT_BRANCH@";
    }

    // Get the normalized version string
    std::string GetNormalizedVersionString() {
      std::string version("@GIT_LAST_TAG@");

      auto cur_branch = CurrentBranch();
      if (not cur_branch.empty()) {
        version += "_" + cur_branch;
      }

      std::string date = "@GIT_COMMIT_DATE_ISO8601@";
      std::replace(date.begin(), date.end(), ' ', '_');

      version += "_" + date;

      if (AnyUncommittedChanges()) {
        version += "_DIRTY";
      }

      return version;
    }

    // The project name as seen by CMake
    std::string ProjectName() {
      return "@PROJECT_NAME@";
    }

  }

}

#endif //POEM_VERSION_H
