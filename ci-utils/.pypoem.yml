.pypoem-base:
  variables:
    CIBW_ALLOW_EMPTY: True
    CIBW_DEBUG_TRACEBACK: True
    CIBW_BUILD_VERBOSITY: 0

.pypoem-scripts:
  prepare:
    - !reference [ .add-ssh-key, before_script ]
    - pip install --upgrade pip
    - pip install cibuildwheel==2.22.0
    - pip install cython
    - pip install where
    - pip install numpy
    - pip install argparse
    - pip uninstall -y pypoem
  build:
    - python --version
    - cibuildwheel --print-build-identifiers # list wheels
    - cibuildwheel --output-dir wheels
  test:
    - pip install wheels/$(ls wheels)
    - cd tests/pypoem
    - python test_pypoem.py
    - poem_check my_vessel.nc
    - poem_tree my_vessel.nc
    - poem_clean my_vessel.nc my_vessel_clean.nc
    - poem_tree my_vessel_clean.nc
    - poem_hash my_vessel.nc
    - poem_info my_vessel.nc
    - poem_layout my_vessel.nc
    - poem_tree my_vessel.nc
    - poem_upgrade my_vessel.nc my_vessel_upgraded.nc
    - cd ../..
  clean:
    - rm -Rf build

.pypoem-linux:
  image: python:3.12-bullseye
  services:
    - docker:dind # using Docker In Docker as a service
  variables:
    CIBW_PLATFORM: linux
    CIBW_BEFORE_ALL: >
      yum update &&
      yum install -y openssh-clients &&
      eval $(ssh-agent -s) &&
      mkdir -p ~/.ssh &&
      echo "$GITLAB_CI_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa &&
      chmod 700 ~/.ssh &&
      chmod 700 ~/.ssh/id_rsa &&
      echo "$GITLAB_CI_SSH_KNOWN_HOST" | tr -d '\r' > ~/.ssh/known_hosts

  #    CIBW_REPAIR_WHEEL_COMMAND: >
  #      cat build/src/poem/version.h
  #      cat python/pypoem/_version.py

  before_script:
    - !reference [ .pypoem-scripts, prepare ]
    - curl -sSL https://get.docker.com/ | sh # install docker

.pypoem-windows:
  variables:
    CIBW_PLATFORM: windows
    PYTHONIOENCODING: utf-8
  before_script:
    - !reference [ .pypoem-scripts, prepare ]
  tags:
    - windows-test

.pypoem-tests:
  extends: .pypoem-base
  except: 
    - tags
  stage: build
  script:
    - !reference [ .pypoem-scripts, build ]
    - !reference [ .pypoem-scripts, test ]

.pypoem-multiversion:
  extends: .pypoem-base
  only: 
    - tags
  stage: build
  script:
    - !reference [ .pypoem-scripts, build ]
    - ls wheels
  artifacts:
    paths:
      - wheels
    expire_in: 3 hours

.pypi-deploy:
  only:
    - tags
  stage: deploy
  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD
  before_script:
    - pip install twine
  script:
    # TODO: trouver un moyen de recuperer les versions de pipy
    - twine upload wheels/*

