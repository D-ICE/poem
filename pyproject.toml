[build-system]
#requires = ["scikit-build-core", "pybind11"]
requires = ["scikit-build-core"]
build-backend = "scikit_build_core.build"

[project]
name = "pypoem"
description = "Performance pOlar Exchange forMat"
readme = "README.md"
maintainers = [{ name = "D-ICE ENGINEERING", email = "francois.rongere@dice-engineering.com" }]
version = "0.1"


requires-python = ">=3.9"
classifiers = [
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 4 - Beta",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/D-ICE/poem"
Documentation = "https://dice-poem.readthedocs.io/en/latest/"

#[project.scripts] # Pour ajouter un outil cli...
#cliapp = "package.__main__:main"



[tool.scikit-build]
#metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
#sdist.include = ["src/pypoem/_version.py"]

#wheel.packages = ["src/pypoem"]
#wheel.license-files = ["LICENSE.txt"]
cmake.build-type = "Release"


[tool.scikit-build.cmake.define]
POEM_BUILD_TESTS = false
POEM_BUILD_TOOLS = false # TODO: voir si on met true pour installer exe...
POEM_ALLOW_DIRTY = false
POEM_BUILD_PYTHON = true
POEM_BUILD_POC = false

[tool.cibuildwheel.linux]
#before-all = """
#    'which ssh-agent || ( apt update -y && apt install -y openssh-client )' && \
#    eval $(ssh-agent -s) && \
#    mkdir -p ~/.ssh && \
#    echo "$GITLAB_CI_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa && \
#    chmod 700 ~/.ssh && \
#    chmod 700 ~/.ssh/id_rsa && \
#    ssh-add && \
#    echo "$GITLAB_CI_SSH_KNOWN_HOST" | tr -d '\r' > ~/.ssh/known_hosts && \
#    apt update -y && apt install -y uuid-dev
#"""
#before-all = """
#    apt update -y && apt install -y openssh-client && \
#    eval $(ssh-agent -s) && \
#    mkdir -p ~/.ssh && \
#    echo "$GITLAB_CI_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa && \
#    chmod 700 ~/.ssh && \
#    chmod 700 ~/.ssh/id_rsa && \
#    ssh-add && \
#    echo "$GITLAB_CI_SSH_KNOWN_HOST" | tr -d '\r' > ~/.ssh/known_hosts && \
#    apt update -y && apt install -y uuid-dev
#"""
#before-all = """
#    apk add --update --no-cache
#    apk add openssh-client && \
#    eval $(ssh-agent -s) &&\
#    mkdir -p ~/.ssh && \
#    echo "$GITLAB_CI_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa && \
#    chmod 700 ~/.ssh && \
#    chmod 700 ~/.ssh/id_rsa && \
#    ssh-add && \
#    echo "$GITLAB_CI_SSH_KNOWN_HOST" | tr -d '\r' > ~/.ssh/known_hosts
#"""
before-all = """
    yum install -y openssh-clients && \
    eval $(ssh-agent -s) && \
    mkdir -p ~/.ssh && \
    echo "$GITLAB_CI_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa && \
    chmod 700 ~/.ssh && \
    chmod 700 ~/.ssh/id_rsa && \
    ssh-add && \
    echo "$GITLAB_CI_SSH_KNOWN_HOST" | tr -d '\r' > ~/.ssh/known_hosts && \
    ls ~/.ssh
"""

#[tool.cibuildwheel.linux]
#environment = { SSH_AUTH_SOCK = "/host$SSH_AUTH_SOCK" }
#environment-pass = ["SSH_AUTH_SOCK"]
#before-test = """
#    apt install -y openssh-client && \
#    mkdir -p ~/.ssh && \
#    chmod 700 ~/.ssh && \
#    ssh-keyscan github.com >> ~/.ssh/known_hosts
#"""

#[tool.setuptools_scm]  # Section required
#write_to = "src/pypoem/_version.py"


# The versions of CMake to allow. If CMake is not present on the system or does
# not pass this specifier, it will be downloaded via PyPI if possible. An empty
# string will disable this check. The default on 0.10+ is "CMakeLists.txt",
# which will read it from the project's CMakeLists.txt file, or ">=3.15" if
# unreadable or <0.10.
#cmake.version = ""

# A list of args to pass to CMake when configuring the project. Setting this in
# config or envvar will override toml. See also ``cmake.define``.
#cmake.args = []

# A table of defines to pass to CMake when configuring the project. Additive.
#cmake.define = {}

# DEPRECATED in 0.10, use build.verbose instead.
#cmake.verbose = ""

# The build type to use when building the project. Valid options are: "Debug",
# "Release", "RelWithDebInfo", "MinSizeRel", "", etc.


# The source directory to use when building the project. Currently only affects
# the native builder (not the setuptools plugin).
#cmake.source-dir = "."

# DEPRECATED in 0.10; use build.targets instead.
#cmake.targets = ""

# The versions of Ninja to allow. If Ninja is not present on the system or does
# not pass this specifier, it will be downloaded via PyPI if possible. An empty
# string will disable this check.
#ninja.version = ">=1.5"

# If Ninja is not present on the system or is older than required, it will be
# downloaded via PyPI if this is false.
#ninja.make-fallback = true

# The logging level to display, "DEBUG", "INFO", "WARNING", and "ERROR" are
# possible options.
#logging.level = "DEBUG"

# Files to include in the SDist even if they are skipped by default. Supports
# gitignore syntax.
#sdist.include = []

# Files to exclude from the SDist even if they are included by default. Supports
# gitignore syntax.
#sdist.exclude = []

# If set to True, try to build a reproducible distribution (Unix and Python 3.9+
# recommended).  ``SOURCE_DATE_EPOCH`` will be used for timestamps, or a fixed
# value if not set.
#sdist.reproducible = true

# If set to True, CMake will be run before building the SDist.
#sdist.cmake = false

# A list of packages to auto-copy into the wheel. If this is not set, it will
# default to the first of ``src/<package>``, ``python/<package>``, or
# ``<package>`` if they exist.  The prefix(s) will be stripped from the package
# name inside the wheel. If a dict, provides a mapping of package name to source
# directory.
#wheel.packages = ["src/<package>", "python/<package>", "<package>"]

# The Python tags. The default (empty string) will use the default Python
# version. You can also set this to "cp37" to enable the CPython 3.7+ Stable ABI
# / Limited API (only on CPython and if the version is sufficient, otherwise
# this has no effect). Or you can set it to "py3" or "py2.py3" to ignore Python
# ABI compatibility. The ABI tag is inferred from this tag.
#wheel.py-api = ""

# Fill out extra tags that are not required. This adds "x86_64" and "arm64" to
# the list of platforms when "universal2" is used, which helps older Pip's
# (before 21.0.1) find the correct wheel.
#wheel.expand-macos-universal-tags = false

# The install directory for the wheel. This is relative to the platlib root. You
# might set this to the package name. The original dir is still at
# SKBUILD_PLATLIB_DIR (also SKBUILD_DATA_DIR, etc. are available). EXPERIMENTAL:
# An absolute path will be one level higher than the platlib root, giving access
# to "/platlib", "/data", "/headers", and "/scripts".
#wheel.install-dir = ""

# A list of license files to include in the wheel. Supports glob patterns. The
# default is ``["LICEN[CS]E*", "COPYING*", "NOTICE*", "AUTHORS*"]``. Must not be
# set if ``project.license-files`` is set.
#wheel.license-files = ""

# If set to True (the default), CMake will be run before building the wheel.
#wheel.cmake = true

# Target the platlib or the purelib. If not set, the default is to target the
# platlib if wheel.cmake is true, and the purelib otherwise.
#wheel.platlib = ""

# A set of patterns to exclude from the wheel. This is additive to the SDist
# exclude patterns. This applies to the final paths in the wheel, and can
# exclude files from CMake output as well.  Editable installs may not respect
# this exclusion.
#wheel.exclude = []

# The build tag to use for the wheel. If empty, no build tag is used.
#wheel.build-tag = ""

# If CMake is less than this value, backport a copy of FindPython. Set to 0
# disable this, or the empty string.
#backport.find-python = "3.26.1"

# Select the editable mode to use. Can be "redirect" (default) or "inplace".
#editable.mode = "inplace"

# Turn on verbose output for the editable mode rebuilds.
#editable.verbose = true

# Rebuild the project when the package is imported. The build-directory must be
# set.
#editable.rebuild = false

# Extra args to pass directly to the builder in the build step.
#build.tool-args = []

# The build targets to use when building the project. Empty builds the default
# target.
#build.targets = []

# Verbose printout when building.
#build.verbose = true

# The components to install. If empty, all default components are installed.
#install.components = []

# Whether to strip the binaries. True for release builds on scikit-build-core
# 0.5+ (0.5-0.10.5 also incorrectly set this for debug builds).
#install.strip = true

# The path (relative to platlib) for the file to generate.
#generate[].path = ""

# The template to use for the file. This includes string.Template style
# placeholders for all the metadata. If empty, a template-path must be set.
#generate[].template = ""

# The path to the template file. If empty, a template must be set.
#generate[].template-path = ""

# The place to put the generated file. The "build" directory is useful for CMake
# files, and the "install" directory is useful for Python files, usually. You
# can also write directly to the "source" directory, will overwrite existing
# files & remember to gitignore the file.
#generate[].location = "install"

# A message to print after a build failure.
#messages.after-failure = ""

# A message to print after a successful build.
#messages.after-success = ""

# List dynamic metadata fields and hook locations in this table.
#metadata = {}

# Strictly check all config options. If False, warnings will be printed for
# unknown options. If True, an error will be raised.
#strict-config = true

# Enable early previews of features not finalized yet.
#experimental = false

# If set, this will provide a method for backward compatibility.
#minimum-version = "0.10"  # current version

# The build directory. Defaults to a temporary directory, but can be set.
#build-dir = "./pypoem_build"

# Immediately fail the build. This is only useful in overrides.
#fail = false