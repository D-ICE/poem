include:
  - project: 'common/ci-utils'
    file:
      - '/templates/.add-ssh-key.yml'
      - '/templates/.add-aws-key.yml'

.scripts:
  deps:
    - apt update
    - apt upgrade -y
    - apt remove cmake
    - apt install -y git build-essential
    - pip install cmake

# cibuildwheel SEE: https://cibuildwheel.pypa.io/en/stable/setup/#gitlab-ci

  cmake:
    - mkdir build && cd build
    - cmake ..
      -DCMAKE_BUILD_TYPE=Release
      -DPOEM_BUILD_TESTS=$ENABLE_TEST
      -DPOEM_BUILD_TOOLS=ON
      -DPOEM_ALLOW_DIRTY=OFF
      -DPOEM_BUILD_PYTHON=ON
      -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$(pwd)

  awscli:
    - pip install awscli
    - mkdir -p $HOME/.aws
    - echo "[default]" > $HOME/.aws/credentials
    - echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> $HOME/.aws/credentials
    - echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> $HOME/.aws/credentials

stages:
  - build
  - deploy


test:
  only:
    - tags # TODO: retirer
  #  except:
  #    - tags  # don't run the tests on tags
  stage: build

  image: "python:$PYTHON_VERSION-bullseye" # TODO: on pourra prendre une debian autre...

  variables:
    PYTHON_VERSION: "3.10"
    ENABLE_TEST: "ON"

  before_script:
    - !reference [.add-ssh-key, before_script]
    - !reference [.scripts, deps]
    - !reference [ .scripts, awscli ]
  script:
    - !reference [.scripts, cmake]
    - make poem_tests -j6
    - cd bin/tests
    - ./poem_tests


pypoem-linux:
  stage: build

  image: python:3.12-bullseye
  services:
    - docker:dind # using Docker In Docker as a service

  variables:

    CIBW_PLATFORM: linux

#    CIBW_BUILD: cp3*-manylinux_x86_64
    CIBW_BUILD: cp312-manylinux_x86_64

    CIBW_ALLOW_EMPTY: True

    CIBW_DEBUG_TRACEBACK: True

    CIBW_BUILD_VERBOSITY: 3

    CIBW_BEFORE_ALL: >
      yum install -y openssh-clients &&
      yum install -y graphviz git &&
      eval $(ssh-agent -s) &&
      mkdir -p ~/.ssh &&
      echo "$GITLAB_CI_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa &&
      chmod 700 ~/.ssh &&
      chmod 700 ~/.ssh/id_rsa &&
      echo "$GITLAB_CI_SSH_KNOWN_HOST" | tr -d '\r' > ~/.ssh/known_hosts

    CIBW_REPAIR_WHEEL_COMMAND: "ls"

  before_script:
    - !reference [ .add-ssh-key, before_script ]
    - curl -sSL https://get.docker.com/ | sh # install docker
    - pip install --upgrade pip
    - pip install cibuildwheel==2.22.0

  script:
    - cibuildwheel --print-build-identifiers # list wheels
    - cibuildwheel --output-dir linuxwheels
    - ls linuxwheels
    - pwd
    - ls /builds
#    - cat build/src/poem/version.h

  artifacts:
    paths:
      - linuxwheels
    expire_in: 3 hours

deploy:
  stage: deploy
  image: python:3.12-bullseye

  variables:
    TWINE_USERNAME: $TWINE_USERNAME
    TWINE_PASSWORD: $TWINE_PASSWORD

  before_script:
    - pip install twine
    - ls linuxwheels

  script:
    # TODO: trouver un moyen de recuperer les versions de pipy
    - twine upload linuxwheels/*
