include:
  - project: 'common/ci-utils'
    file:
      - '/templates/.add-ssh-key.yml'
      - '/templates/.add-aws-key.yml'
#  - 'ci-utils/.libpoem.yml'
#  - 'ci-utils/.pypoem.yml'

stages:
  - build
  - deploy

.libpoem-all:
  variables:
    ENABLE_TEST: "ON"
  before_script: # install awscli
    - pip install awscli
    - mkdir -p $HOME/.aws
    - echo "[default]" > $HOME/.aws/credentials
    - echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> $HOME/.aws/credentials
    - echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> $HOME/.aws/credentials
  script: # run cmake
    - mkdir build && cd build
    - cmake ..
      -DCMAKE_BUILD_TYPE=Release
      -DPOEM_BUILD_TESTS=$ENABLE_TEST
      -DPOEM_BUILD_TOOLS=ON
      -DPOEM_ALLOW_DIRTY=OFF
      -DPOEM_BUILD_PYTHON=ON
      -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$(pwd)

.libpoem-scripts:
  build:
    - cmake --build . --parallel 8 --target poem_tests --config Release
  test:    
    - cd bin/tests
    - .$CMAKE_OUTPUTDIR/poem_tests

.libpoem-linux:
  image: "python:3.12-bullseye" # TODO: on pourra prendre une debian autre...
  before_script:
    - apt update
    - apt upgrade -y
    - apt remove cmake
    - apt install -y git build-essential
    - pip install cmake
    - CMAKE_OUTPUTDIR=

.libpoem-windows:
  before_script:
    - CMAKE_OUTPUTDIR=/Release
  tags:
    - windows

.libpoem-tests:
  extends: .libpoem-all
  except: tags
  stage: build
  script:
    - !reference [ .libpoem-scripts, build ]
    - !reference [ .libpoem-scripts, test ]

    #- aws s3 cp poem_testing_spec_v1.nc s3://shiplify-polarplot-data/TestingPolars/

cpp-linux-tests:
  extends:
    - .libpoem-linux
    - .add-ssh-key
    - .libpoem-tests

#pypoem-linux-tests:
#  extends: 
#    - .pypoem-linux
#    - .add-ssh-key
#    - .pypoem-tests
#  variables:
#    CIBW_BUILD: cp312-manylinux_x86_64

#pypoem-linux-multiversion:
#  extends:
#    - .pypoem-linux
#    - .add-ssh-key
#    - .pypoem-multiversion
#  variables:
#    CIBW_BUILD: cp3*-manylinux_x86_64

#pypi-deploy:
#  only:
#    - tags
#  stage: deploy
#  image: python:3.12-bullseye
#  variables:
#    TWINE_USERNAME: $TWINE_USERNAME
#    TWINE_PASSWORD: $TWINE_PASSWORD
#  before_script:
#    - pip install twine
#    - ls linuxwheels
#  script:
    # TODO: trouver un moyen de recuperer les versions de pipy
#    - twine upload linuxwheels/*

#cpp-windows-tests:
#  extends:
#    - .libpoem-windows
#    - .add-ssh-key
#    - .libpoem-tests

#pypoem-windows-tests:
#  extends:
#    - .pypoem-windows 
#    - .pypoem-tests
#  variables:
#    CIBW_BUILD: cp313-win_amd64

#pypoem-windows-multiversion:
#  extends:
#    - .pypoem-windows 
#    - .pypoem-multiversion
#  variables:
#    CIBW_BUILD: cp3*-win_amd64

#pypi-windows-deploy:
#  only:
#    - tags
#  stage: deploy
#  variables:
#    TWINE_USERNAME: $TWINE_USERNAME
#    TWINE_PASSWORD: $TWINE_PASSWORD
#  script:
#    # TODO: trouver un moyen de recuperer les versions de pipy
#    - twine upload wheels/*
#  tags:
#    - windows
